СИНХРОНИЗАЦИЯ

Бинарные модули - программы,  находящ. в пассивном состоянии в хранилище и скомпилированные в формате, приемлемом для данной ОС
и машинной архитектуры, готовые к запуску, но пока бездействующие.

Современ. ОС представляют в польз. прост-ве 2 основные виртуальные абстрацкии:
- виртуальная память
- витруальный процессор
Совместно они создают для кажд.выпол-щегося пр-са, что он один владеет всеми ресурсами.

Вирт.память связывается с процессом, а не с поотком. 
Виртуальный процессор связан с потоками, а не процессами.

Затраты на переключ. от одного потока к другому внутри процесса меньше, чем от процесса к процессу.

Отладка многопоточных программ гораздо сложнее, чем однопоточных.
Сбой в сихронизации может привести к некорректному выполнению/прекращению программы.

Поточные модели
- Модель 1:1 (поточность 1:1) - ядро обеспечивает свою встроенную поддержку потоков,  и каждый из них напрямую отправляет 
пользовательское пр-ство свою инфу. В ней присутствует соотношение 1:1 между тем, что предоставляет ядро,  и тем, что 
получает пользователь. Это "поточность на уровне ядра", т.к. ядро явл-ся основной исистемно поточной модели
- Модель N:1 (поточность N:1), "поточность на уровне пользователя" - в этой модели польз-ское пр-тво - основа системной поддержки
поточности Процесс с N потоками приведет к одному процессу в ядре. Это модель (почти) не требует поддержки ядра,
но для нее нужно много кода в польз-м пр-ве. Преимущество - переключение контекста не почти не требует ресурсов, т.к. приложение
само решает какой поток когда запустить без участия ядра. Недостаток - только один элемент в ядре поддерживает N потоков

Большинство библиотек поддерживает поточность 1:1

Coroutines and fibers
Корутины и фиберы обеспечивают элементы выполнения еще более легкие, чем потоки. Корутины и фиберы - являются явлением
польз-ского пространства, но для их планирования и выполнения почти не требуется поддержка польз. прост-ва. Корутины и 
фиберы в боьлшей степени нужны для контроля выполнения программ, чем для обеспеч. параллелизма. 
	По своей природе Linux не поддерживает сопрограммы и фиберы.
	Язык Go беспечивает поддержку сопрограммно-подобных конструкций в Linuxна уровне языке (книга Р.Лав, Сист.прог-е)

Первый и самый важный шаг при построении поточного приложения - выбор поточного шаблона, который одновременно будет явл.
процессной моделью и моделью ввода-вывода для вашего приложения. 
Два основных шаблона:
	- поток на соединение (Connection Oriented Thread)
	- поток, управляемый событием (Event-Driven Thread)

Поток на соединение
	Поток на соед-е - шаблон программирования, в кот. одному элементу вып-я назначается один поток, и этот поток назнач-ся
не более, чем одному рабочему элементу на протяж.всей работы. Рабочий элемент - запрос на соединение и т.п. Иными словами это
"запуск до завершения". ПОток подхватывает соединеие или запрос и обрарбатывает его до конца.  

	Поток, управляемый событием, противоположен потоку на соединение. 

Один из самых важных шаблонов многопоточного программирования - запирание данных, а не кода

Основная часть любой поточной библиотеки находится в пользовательском пространстве


