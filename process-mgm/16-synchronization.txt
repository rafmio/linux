Synchronization
Синхронизация

Виды проблем, которые могут возникнуть применительно к конкурентности:
- Первичные - проблемы, существ-щими в конкурентной среде, в кот.нет механизмов управления (синхронизации). "Естественные" проблемы
- Вторичные - проблемы, возникающими в рез-те попытки исправления проблем из первой группы. "Постсинхронизационные" проблемы. Возникают
  только при неправилном использ-и уравляющих механизмов. 

При отсутствии механизмов упр-я конкур-ми заданиями разные варианты чередования инструкций приводят к 
разрым итоговым состояниям.

Критический участок - код, который должен выполняться по порядку, когда остальной код может выполняться в любом порядке

Заметка из книги:
Выражение X = X + 1 (X++) не атомарно в Си, т.е. его нельзя уместить в одну инструкцию. Это связано с тем, что у нас не может 
быть прямого доступа к памяти, когда мы выполняем с ней некую операцию. Мы всегда используем временную переменную 
(или регистр пр-ссора) для хранения врем. знач-я.

Гонка данных и стостояние гонки - разные понятия.
Гонка данных требует наличие переменной.

У переменной, доступной только для чтения, не может быть гонки данных. Но может быть состояние гонки.

Ни один механизм синхронизации не обходится без ожидания. 

Семафоры - обычные переменные или объекты, которые используются для синхронизации доступа к разделяемому ресурсу.
Когда задание хочет обратиться к разделяемому ресурсу, оно должно сначала проверить семафор и попросить разрешения продолжить работу.
Аналогия: врач - разделяемый ресурс, очередь людей - очередь заданий, ждущих доступа к ресурсу, секретарь - семафор.
Кабинет врача - критический участок (т.е. набор инструкций, защищенных семафором, задание не может войти в него без разрешения
семафора). Задача семафора - защищать критический участок. Пытаясь войти в него, задание сначала должно уведомить семафор.
Также семафор д.б. уведомлен о завершении заданием работы.

Семафор, кот. разрешает входить на критический участок по одному, обычно называют ДВОИЧНЫМ СЕМАФОРОМ или МЬЮТЕКСОМ.

Мьютексы более распространены, чем семафоры общего вида, их всегда можно встретить в конкурентном коде. 

Мьютекс - mutex - mutual exclusion (взаимное исключение). 
Взаимное исключение - самый важный аспект конкурентности и доминирующий фактор в различ.управляющ. мех-змах.

Семафоры и мьютексы - блокирумые объекты. 
Ожидание и выход на критический участок = эквивалент блокировки семафора.
Выход с критического участка и обновление семафора = эквивалент разблокировки семафора.

Процесс ожидания блокировки семафора называется СОСТЯЗЯНИЕМ.

Барьерная синхронизация - метод сихр-ции, при кот.выполнение параллельн.алгоритма можно разделить на несколько этапов,
разделенных БАРЬЕРАМИ. Барьер для группы потоков (или пр-ссов) в исходном коде означает, что кажд. поток (пр-сс) 
должен остановиться в этой точке и подождать достижения барьера всеми потоками (пр-ссами) группы. 

БАРЬЕР ПАМЯТИ - вид барьерной инструкции, кот. приказывает компилятору и ЦП устанавлиать строгую послед-сть
между обращениями к пямяти до и после барьера. 


Операции блокировки-разблокировки всегда парные. Если задание дважды заблокировало мьютекс, то разблоировать его
должно тоже два. 

Условную переменную необх. использ. в связке с мьютексом. Если этого не сделать, то вашему решению будет не хватать взаимного 
исключения. 

Когда процессы и потоки не имеют разделяемого состояния, между многопроцессорностью и многопоточностью нет разницы.


