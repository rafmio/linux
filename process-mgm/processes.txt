Processes

struct task_struct {
}
List of members and short description
Explanation: https://linux-concepts.blogspot.com/2018/02/explanation-of-struct-taskstruct.html

Syscalls for process management (list with short description)

Exercises: Go, C
- create process
- kill process

Процесс - сегмент кода (text section).

Ресурсы процесса:
- открытые файлы
- сигналы
- внутренние данные ядра
- состояние процессора
- адресное пространство памяти
- один или несколько потоков выполнения кода (threads of execution)
- сегмент данны программы (data section)

Потоки (threads) - объекты, выполняющ. опр.действия внутри процесса. В каждом потоке содержится:
- уникальный счетчик команд (program counter), 
- стек процесса, 
- набор регистров процессора

Планировщик ядра управвляет выполнением отдельных потоков, а не процессов.
В традиционных Unix-подобных ОС 1 процесс == 1 поток.  В современных ОС многопоточные программы используются широко.
(?)Поток в Linux - это специальный тип процесса.

В современных ОС процессы предусматривают наличие двух вирт.ресурсов:
- вирт.процессора
- вирт.памяти

Благодоря им для польз.пр-сов создается иллюзия, что они монопользо использ.всю комп.систему. 
Но! Потоки распологаются в общей вирт.памяти процесса, но каждый их них вып.на собс.вирт.пр-соре.

Другое название процесса - задача (task).

Команда apropos signal - вывести список сигналов и их значения
man 7 signal - ман-страница
jobs -l или просто jobs - вывести список фоновых процессов. Фоновыми, например, они могут стать после нажатия Ctrl+Z. Номера процессов будут в квадратных скобках  [1], [2] и т.д.
fg %1 - перейти на фоновую задачу 1 

Список пр-сов хранится в ядре в виде циклического двусвязного списка - список задач (task list) или массив задач (task array)
Каждый элемент списка - запущенный процесс - дескриптор процесса. Тип дескриатора - task_struct (описано в <linux/sched.h>)
В дескрипторе содерж-ся данные, кот.описывают выполняющуюся программу - открыт.файлы, адр.простр-во пр-са, сигналы, ожидающ.обработки, состояние процесса и др.

Память под структуру task_struct выделяется с пом.спец. прог-мы распределения блочного типа (slab allocator), обеспечивающий эффективн. повторное использ-е объектов и раскрашивание стека (cache coloring)

Отдельно изучить - стек процесса в Linux


