_exit(), exit()

Программы обычно не вызывают _exit() напрямую, вместо этого используют библиотечную exit()
exit() выполняет различные предварительные действия:
    - вызываются обработчики выхода (ф-ции, зарегистрированные с пом. вызовов
      atexit() и on_exit()); в порядке, обратном их регистрации
    - сбрасываются буферы потоков stdio
    - выполняется системный вызов _exit()

    Явный возврат return n обычно является эквивалентом exit(n)

    Во время нормального и аварийного завершения процесса выполняются следующие действия:
        - закрываются:
            - дескрипторы открытых файлов
            - потоки каталогов
            - дескрипторы каталога сообщений
            - дескрипторы преобразования
        - в результате закрытия дескрипторов снимаются все блокировки файлов, которые
          удерживали данный процесс 
        - закрываются любые именованные семафоры POSIX, открытые в вызывающем процессе,
          как будто при вызове sem_close()
        - закрываются любые очереди сообщений POSIX, открытые в вызывающем процессе,
          как будто при вызове mq_close()
        - если в результате завершения процесса его группа становится "осиротевшей",
          то всем остановл.пр-сам, кот в ней находится, по очереди вызываются 
          сигналы SIGHUP и SIGCONT
        - снимаются любые блокировки памяти, установленные mlock() или mlockall()
        - сбрасываются любые отображения в память, созданные mmap() 

Алиса надиктовала:
	Поток каталогов - это последовательность элементов файловой системы, которые можно рассматривать как файлы или каталоги, которые хранятся в памяти. Они используются для управления доступом к файловой системе и обеспечивают быстрый доступ к файлам и каталогам.

	Каталог сообщений - это структура данных, которая используется для хранения информации о сообщениях, отправляемых между процессами в операционной системе Linux. Она позволяет отслеживать, какие сообщения были отправлены и получены, а также управлять их доставкой.
	
	Дескриптор преобразования - это объект, который используется для управления преобразованиями данных между различными форматами. Он позволяет преобразовывать данные из одного формата в другой, например, из текста в число или из числа в строку.

	Когда процесс завершается, ядро посылает сигнал SIGCHLD родительскому процессу. По умолчанию этот сигнал игнорируется и род.
пр-сс не предпринимает действий. Однако при необх-сти пр-ссы могут обработать данный сигнал с пом.сист. вызовов signal() и sigaction().
		
