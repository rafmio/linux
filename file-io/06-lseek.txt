#include <unistd.h>
off_t lseek(int fd, off_t offset, int whence);

Возвращает:
	- новое файловое смещение при успешном завершении
	- (-1) при ошибке (off_t - знаковый тип данных)

	Смещение иногда называют смещением чтения-записи или указателем. Обозначает место в файле, откуда будет стартовать работа следующего системного вызова read() или write(). Первый байт всегда расположен со смещением 0.

	При открытии файла смещение устанавливается на его начало, а затем автоматически корректируется каждым послед. вызовом read() или write(), чтобы указывать на следю байт файла непосредственно считанного или записанного байта (байтов).

	lseek() устанавливает файловое смещение открытого файла.
	offset - смещение
	whence - отправная точка, может иметь значения:
					- SEEK_SET - offset в начало файла
					- SEEK_CUR - устанавл-ся в байтах на расстоянии offset от текущ. смещ-я
					- SEEK_END - файловое смещение уст-ся на размер файла + offset


	Если whence содержить SEEK_CUR или SEEK_END, то у арг-та offset м.д. отлиц. или положит. знач-е
	Для SEEK_SET может быть только положит-м.

	lseek() просто устанавливает значение для записи ядра,  содержащий файловое смещение и связанной с fd. Никакого физического доступа к устр-ву при этом не происходит.
	lseek() нельзя применять у файлам FIFO, сокету, терминалу.
	
	read() не прочитает байты до файловой позиции, установленной lseek() за пределами файла, а вот записать можно.
	Пространство между предыдущ.концом файла и только что записаннымми байтами назыв. файловой дырой. Чтение из дыры возвращ. буфер данных, содержащий 0 (нулевые байты).
	Файловые дыры не занимают места на диске. FS не выделяет для дыры дисковые блоки до тех пор, пока туда не будут внесены данные. Файл дампа ядра - яркий пример файла с большими дырами.
	 
