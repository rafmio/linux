#include <unistd.h>
ssize_t read(int fd, void *buffer, size_t count);

Возвращает:
	- кол-во считанных байтов 
	- 0 при EOF
	- (-1) при ошибке  (ssize_t - знаковый)

count - макс.кол-во счит-х байт (size_t - беззнаковый).
buffer - буфер, в кот.д.б. помещены входные данные, д.б. не менее count

	Системные вызовы не выделяют память под буферы, кот.исп-ся для возвращения инфы вызывающему процессу. Вместо этого следует передать указатель на ранее выделенный буфер памяти подходящ. размера. Этим вызовы отличаются от ряда библиотечн. ф-ций, кото. выделяют буферы в памяти с целью возвращ-я инфы вызывающему процессу.

	При вызове read() кол. счит-х байт м.б. меньше запрашиваемого.
	
	read() не добавляет завершающий нулевой байт в конце строки, которая задается для вывода printf(). Для того, чтобы в конце буффера стоял '/0' нужно его вставить в конце buffer[MAX_READ]: 
buffer[numRead] = '\0';


#include <stdio.h>
int fgetc(FILE *stream);
Считывает следующий символ из stream и возвращает как unsigned char, приведенный к int.
Сохранение в char, а не в int - распространенный промах.


#include <stdio.h>
char* fgets(char *str, int size, FILE* stream);


